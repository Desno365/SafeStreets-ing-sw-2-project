rules_version = '2';
service cloud.firestore {
    match /databases/{db}/documents {

        // Violation Reports documents
        // Allows reading
        // Allows only creation of new violation reports, doesn't allow updating and deleting.
        match /violationReports/{violationReportId} {
            allow read;
            allow create: if isOwnerFieldCorrect();
        }

        // User documents
        // Allows everything if the userIds match.
        match /users/{userId} {
             allow read, write: if isOwner(userId);
        }

        // Group documents
        // Allows reading by everyone (for queries)
        // Allows update only from the municipality, doesn't allow creating or deleting.
        match /municipalities/{municipalityId}/groups/{groupId} {
             allow read;
             allow update: if isSpecifiedMunicipality(municipalityId);
        }

        // Cluster documents
        // Allows reading by everyone (for queries)
        // Doesn't allow creating, updating or deleting.
        match /municipalities/{municipality}/clusters/{clusterId} {
             allow read;
        }

        // TODO delete (allows everything)
        match /{document=**} {
            allow read, write;
        }
    }
}


function prefix() {
    return /databases/{db}/documents;
}

// Returns true iff the document that is currently created or modified has the userUid field that corresponds to the user.
function isOwnerFieldCorrect() {
    return request.auth.uid == request.resource.data.userUid;
}

// Returns true if the user is the owner of the file.
function isOwner(uid) {
    return request.auth.uid == uid;
}

// Returns true if the user is the specified municipality.
function isSpecifiedMunicipality(municipalityId) {
    return request.auth.token != null && request.auth.token.isMunicipality == true && request.auth.token.municipalityId == municipalityId;
}
